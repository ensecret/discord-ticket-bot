require('dotenv').config();
const { Client, GatewayIntentBits, Partials, ButtonBuilder, ButtonStyle, ActionRowBuilder, EmbedBuilder, StringSelectMenuBuilder, PermissionFlagsBits, ChannelType } = require('discord.js');
const connectDB = require('./config/database');
const Ticket = require('./models/Ticket');
const TicketPanel = require('./models/TicketPanel');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.MessageContent
    ],
    partials: [Partials.Channel, Partials.Message, Partials.User]
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB();

client.once('ready', async () => {
    console.log(`–ë–æ—Ç ${client.user.tag} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!`);
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ —Ç–∏–∫–µ—Ç–æ–≤
        const panels = await TicketPanel.find({});
        
        for (const panel of panels) {
            try {
                const channel = await client.channels.fetch(panel.channelId);
                if (!channel) continue;

                const message = await channel.messages.fetch(panel.messageId);
                if (!message) continue;

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
                const embed = new EmbedBuilder()
                    .setTitle('üé´ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤')
                    .setDescription('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
                    .setColor('#0099ff')
                    .addFields(
                        { name: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', value: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã' },
                        { name: 'üêõ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', value: '–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ' },
                        { name: '‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å', value: '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã' }
                    );

                const selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('select_category')
                    .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
                    .addOptions([
                        {
                            label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                            description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã',
                            value: 'support',
                            emoji: 'üîß'
                        },
                        {
                            label: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
                            description: '–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ',
                            value: 'bug',
                            emoji: 'üêõ'
                        },
                        {
                            label: '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å',
                            description: '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
                            value: 'general',
                            emoji: '‚ùì'
                        }
                    ]);

                const row = new ActionRowBuilder().addComponents(selectMenu);

                await message.edit({
                    embeds: [embed],
                    components: [row]
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏:', error);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–µ–π:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
client.on('interactionCreate', async interaction => {
    try {
        if (!interaction.isCommand()) return;

        if (interaction.commandName === 'setup-tickets') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return interaction.reply({
                    content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                    ephemeral: true
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const existingPanel = await TicketPanel.findOne({ guildId: interaction.guildId });
            if (existingPanel) {
                return interaction.reply({
                    content: '–ü–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å.',
                    ephemeral: true
                });
            }

            const embed = new EmbedBuilder()
                .setTitle('üé´ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤')
                .setDescription('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
                .setColor('#0099ff')
                .addFields(
                    { name: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', value: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã' },
                    { name: 'üêõ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', value: '–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ' },
                    { name: '‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å', value: '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã' }
                );

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('select_category')
                .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
                .addOptions([
                    {
                        label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                        description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã',
                        value: 'support',
                        emoji: 'üîß'
                    },
                    {
                        label: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
                        description: '–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ',
                        value: 'bug',
                        emoji: 'üêõ'
                    },
                    {
                        label: '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å',
                        description: '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
                        value: 'general',
                        emoji: '‚ùì'
                    }
                ]);

            const row = new ActionRowBuilder().addComponents(selectMenu);

            const message = await interaction.channel.send({
                embeds: [embed],
                components: [row]
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–Ω–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const panel = new TicketPanel({
                messageId: message.id,
                channelId: interaction.channelId,
                guildId: interaction.guildId
            });
            await panel.save();

            await interaction.reply({
                content: '–ü–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
                ephemeral: true
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:', error);
        await interaction.reply({
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.',
            ephemeral: true
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryName(category) {
    const categories = {
        'support': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        'bug': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
        'general': '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å'
    };
    return categories[category] || category;
}

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
client.on('interactionCreate', async interaction => {
    if (!interaction.isStringSelectMenu()) return;

    if (interaction.customId === 'select_category') {
        try {
            const category = interaction.values[0];
            const categoryName = getCategoryName(category);
            const guild = interaction.guild;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const ticketCategory = guild.channels.cache.get(process.env.CATEGORY_ID);
            if (!ticketCategory || ticketCategory.type !== ChannelType.GuildCategory) {
                return interaction.reply({
                    content: '–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.',
                    ephemeral: true
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–∏–∫–µ—Ç–æ–≤
            const userTickets = await Ticket.find({
                userId: interaction.user.id,
                status: 'open'
            });

            if (userTickets.length >= parseInt(process.env.MAX_TICKETS_PER_USER)) {
                return interaction.reply({
                    content: `–£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ (${process.env.MAX_TICKETS_PER_USER})!`,
                    ephemeral: true
                });
            }

            const channelName = `—Ç–∏–∫–µ—Ç-${interaction.user.username}-${getCategoryName(category).toLowerCase().replace(/\s+/g, '-')}`;

            const ticketChannel = await guild.channels.create({
                name: channelName,
                type: ChannelType.GuildText,
                parent: ticketCategory,
                permissionOverwrites: [
                    {
                        id: guild.id,
                        deny: [PermissionFlagsBits.ViewChannel]
                    },
                    {
                        id: interaction.user.id,
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ReadMessageHistory
                        ]
                    },
                    {
                        id: process.env.SUPPORT_ROLE_ID,
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ReadMessageHistory
                        ]
                    }
                ]
            });

            const ticket = new Ticket({
                ticketId: ticketChannel.id,
                channelId: ticketChannel.id,
                userId: interaction.user.id,
                category: category,
                status: 'open',
                createdAt: new Date()
            });
            await ticket.save();

            const embed = new EmbedBuilder()
                .setTitle('üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω')
                .setDescription(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à —Ç–∏–∫–µ—Ç, ${interaction.user}!
–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: **${categoryName}**
–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.`)
                .setColor('#00ff00')
                .setTimestamp();

            const closeButton = new ButtonBuilder()
                .setCustomId('close_ticket')
                .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                .setStyle(ButtonStyle.Danger);

            const row = new ActionRowBuilder().addComponents(closeButton);

            const ticketMessage = await ticketChannel.send({
                content: `<@&${process.env.SUPPORT_ROLE_ID}> - –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç`,
                embeds: [embed],
                components: [row]
            });

            ticket.messageId = ticketMessage.id;
            await ticket.save();

            await interaction.reply({
                content: `–í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ${ticketChannel}`,
                ephemeral: true
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞:', error);
            await interaction.reply({
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.',
                ephemeral: true
            });
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton() || interaction.customId !== 'close_ticket') return;

    try {
        const ticket = await Ticket.findOne({ channelId: interaction.channel.id });
        if (ticket) {
            ticket.status = 'closed';
            ticket.closedAt = new Date();
            await ticket.save();

            const embed = new EmbedBuilder()
                .setTitle('üé´ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç')
                .setDescription(`–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user}`)
                .setColor('#ff0000')
                .setTimestamp();

            await interaction.channel.send({ embeds: [embed] });

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
            setTimeout(async () => {
                try {
                    await interaction.channel.delete();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
                }
            }, 5000);

            await interaction.reply({
                content: '–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.',
                ephemeral: true
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞:', error);
        await interaction.reply({
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.',
            ephemeral: true
        });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('messageCreate', async message => {
    if (message.author.bot) return;

    const ticket = await Ticket.findOne({ channelId: message.channel.id });
    if (ticket) {
        ticket.messages.push({
            userId: message.author.id,
            content: message.content,
            timestamp: new Date()
        });
        await ticket.save();
    }
});

client.login(process.env.TOKEN); 
const { PermissionFlagsBits, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, StringSelectMenuBuilder, ChannelType } = require('discord.js');
const Ticket = require('../models/Ticket');
const TicketPanel = require('../models/TicketPanel');
const { getCategoryName } = require('../utils/helpers');
const { createPriorityButtons, priorityColors, priorityEmojis } = require('./priorityHandler');

async function handleSetupCommand(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return interaction.reply({
            content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!',
            ephemeral: true
        });
    }

    const existingPanel = await TicketPanel.findOne({ guildId: interaction.guildId });
    if (existingPanel) {
        return interaction.reply({
            content: '–ü–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å.',
            ephemeral: true
        });
    }

    const embed = new EmbedBuilder()
        .setTitle('üé´ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤')
        .setDescription('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
        .setColor('#0099ff')
        .addFields(
            { name: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', value: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã' },
            { name: 'üêõ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', value: '–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ' },
            { name: '‚ùì –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å', value: '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã' }
        );

    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('select_category')
        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
        .addOptions([
            {
                label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã',
                value: 'support',
                emoji: 'üîß'
            },
            {
                label: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
                description: '–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–µ',
                value: 'bug',
                emoji: 'üêõ'
            },
            {
                label: '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å',
                description: '–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
                value: 'general',
                emoji: '‚ùì'
            }
        ]);

    const row = new ActionRowBuilder().addComponents(selectMenu);

    const message = await interaction.channel.send({
        embeds: [embed],
        components: [row]
    });

    const panel = new TicketPanel({
        messageId: message.id,
        channelId: interaction.channelId,
        guildId: interaction.guildId
    });
    await panel.save();

    await interaction.reply({
        content: '–ü–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
        ephemeral: true
    });
}

async function handleTicketCreation(interaction) {
    const category = interaction.values[0];
    const categoryName = getCategoryName(category);
    const guild = interaction.guild;
    
    const ticketCategory = guild.channels.cache.get(process.env.CATEGORY_ID);
    if (!ticketCategory || ticketCategory.type !== ChannelType.GuildCategory) {
        return interaction.reply({
            content: '–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
            ephemeral: true
        });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ö–µ–ª–ø–µ—Ä–∞
    const supportRole = await guild.roles.fetch(process.env.SUPPORT_ROLE_ID);
    const helpers = supportRole.members;
    const randomHelper = helpers.random();
    const helperId = randomHelper ? randomHelper.id : null;

    const userTickets = await Ticket.find({
        userId: interaction.user.id,
        status: 'open'
    });

    if (userTickets.length >= parseInt(process.env.MAX_TICKETS_PER_USER)) {
        return interaction.reply({
            content: `–£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ (${process.env.MAX_TICKETS_PER_USER})!`,
            ephemeral: true
        });
    }

    const channelName = `—Ç–∏–∫–µ—Ç-${interaction.user.username}-${getCategoryName(category).toLowerCase().replace(/\s+/g, '-')}`;

    const ticketChannel = await guild.channels.create({
        name: channelName,
        type: ChannelType.GuildText,
        parent: ticketCategory,
        permissionOverwrites: [
            {
                id: guild.id,
                deny: [PermissionFlagsBits.ViewChannel]
            },
            {
                id: interaction.user.id,
                allow: [
                    PermissionFlagsBits.ViewChannel,
                    PermissionFlagsBits.SendMessages,
                    PermissionFlagsBits.ReadMessageHistory
                ]
            },
            {
                id: process.env.SUPPORT_ROLE_ID,
                allow: [
                    PermissionFlagsBits.ViewChannel,
                    PermissionFlagsBits.SendMessages,
                    PermissionFlagsBits.ReadMessageHistory
                ]
            }
        ]
    });

    const defaultPriority = 'medium';
    const ticket = new Ticket({
        ticketId: ticketChannel.id,
        channelId: ticketChannel.id,
        userId: interaction.user.id,
        category: category,
        status: 'open',
        priority: defaultPriority,
        assignedTo: helperId
    });
    await ticket.save();

    const embed = new EmbedBuilder()
        .setTitle('üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω')
        .setDescription(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à —Ç–∏–∫–µ—Ç, ${interaction.user}!
–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: **${categoryName}**
${helperId ? `–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: <@${helperId}>` : ''}`)
        .addFields({
            name: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            value: `${priorityEmojis[defaultPriority]} **${defaultPriority.toUpperCase()}**`,
            inline: false
        })
        .setColor(priorityColors[defaultPriority])
        .setTimestamp();

    const closeButton = new ButtonBuilder()
        .setCustomId('close_ticket')
        .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
        .setStyle(ButtonStyle.Danger);

    const row1 = new ActionRowBuilder().addComponents(closeButton);
    const row2 = createPriorityButtons(defaultPriority);

    const ticketMessage = await ticketChannel.send({
        content: `${helperId ? `<@${helperId}>` : `<@&${process.env.SUPPORT_ROLE_ID}>`} - –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç`,
        embeds: [embed],
        components: [row1, row2]
    });

    ticket.messageId = ticketMessage.id;
    await ticket.save();

    await interaction.reply({
        content: `–í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ${ticketChannel}`,
        ephemeral: true
    });
}

async function handleTicketClose(interaction) {
    const ticket = await Ticket.findOne({ channelId: interaction.channel.id });
    if (ticket) {
        ticket.status = 'closed';
        ticket.closedAt = new Date();
        await ticket.save();

        const embed = new EmbedBuilder()
            .setTitle('üé´ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç')
            .setDescription(`–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user}`)
            .setColor('#ff0000')
            .setTimestamp();

        await interaction.channel.send({ embeds: [embed] });

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        const ratingRow = new ActionRowBuilder().addComponents(
            [1,2,3,4,5].map(num => new ButtonBuilder()
                .setCustomId(`rate_${num}_${ticket._id}`)
                .setLabel('‚òÖ'.repeat(num))
                .setStyle(ButtonStyle.Secondary)
            )
        );

        // –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        const ratingText = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫—É –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É
        try {
            const user = await interaction.client.users.fetch(ticket.userId);
            await user.send({
                content: ratingText,
                components: [ratingRow]
            });
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–∞
            await interaction.channel.send({
                content: `<@${ticket.userId}>, ${ratingText}`,
                components: [ratingRow]
            });
        }

        setTimeout(async () => {
            try {
                await interaction.channel.delete();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
            }
        }, 5000);

        await interaction.reply({
            content: '–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.',
            ephemeral: true
        });
    }
}

async function handleRating(interaction) {
    const [_, ratingStr, ticketId] = interaction.customId.split('_');
    const rating = parseInt(ratingStr);
    const ticket = await Ticket.findById(ticketId);
    if (!ticket) {
        return interaction.reply({ content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏.', ephemeral: true });
    }
    if (ticket.rating) {
        return interaction.reply({ content: `–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç: ${'‚òÖ'.repeat(ticket.rating)} (ID: ${ticket._id})`, ephemeral: true });
    }
    ticket.rating = rating;
    ticket.ratingHistory.push({ rating, userId: interaction.user.id });
    await ticket.save();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    let ticketReference = `–¢–∏–∫–µ—Ç ID: ${ticket._id}`;
    try {
        const channel = await interaction.client.channels.fetch(ticket.channelId);
        if (channel) {
            ticketReference = `<#${ticket.channelId}> (ID: ${ticket._id})`;
        }
    } catch (e) {
        // –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ ID
    }

    await interaction.reply({ 
        content: `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –¥–ª—è ${ticketReference}: ${'‚òÖ'.repeat(rating)}`, 
        ephemeral: true 
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    try {
        const feedbackChannel = await interaction.client.channels.fetch(process.env.FEEDBACK_CHANNEL_ID);
        if (feedbackChannel) {
            const helperMention = ticket.assignedTo ? `<@${ticket.assignedTo}>` : '‚Äî';
            const embed = new EmbedBuilder()
                .setTitle('‚≠ê –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
                .setColor('#FFD700')
                .addFields(
                    { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${interaction.user.id}>`, inline: true },
                    { name: '–û—Ü–µ–Ω–∫–∞', value: '‚òÖ'.repeat(rating), inline: true },
                    { name: '–¢–∏–∫–µ—Ç', value: ticketReference, inline: false },
                    { name: '–•–µ–ª–ø–µ—Ä', value: helperMention, inline: true }
                )
                .setTimestamp();
            await feedbackChannel.send({ embeds: [embed] });
        }
    } catch (e) {
        // ignore
    }
}

module.exports = {
    handleSetupCommand,
    handleTicketCreation,
    handleTicketClose,
    handleRating
}; 
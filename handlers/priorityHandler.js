const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const Ticket = require('../models/Ticket');
const { logError, logInfo } = require('../utils/logger');

const priorityColors = {
    low: '#00ff00',    // –ó–µ–ª–µ–Ω—ã–π
    medium: '#ffff00',  // –ñ–µ–ª—Ç—ã–π
    high: '#ff0000'     // –ö—Ä–∞—Å–Ω—ã–π
};

const priorityEmojis = {
    low: 'üü¢',
    medium: 'üü°',
    high: 'üî¥'
};

async function handlePriorityChange(interaction) {
    try {
        const ticket = await Ticket.findOne({ channelId: interaction.channel.id });
        if (!ticket) {
            return interaction.reply({
                content: '–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–∫–µ—Ç–æ–º!',
                ephemeral: true
            });
        }

        const newPriority = interaction.customId.split('_')[1];
        const oldPriority = ticket.priority;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        ticket.priorityHistory.push({
            priority: newPriority,
            changedBy: interaction.user.id,
            timestamp: new Date()
        });
        
        ticket.priority = newPriority;
        await ticket.save();

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        const messages = await interaction.channel.messages.fetch({ limit: 1 });
        const firstMessage = messages.last();

        if (firstMessage && firstMessage.embeds.length > 0) {
            const oldEmbed = firstMessage.embeds[0];
            const newEmbed = new EmbedBuilder()
                .setTitle(oldEmbed.title)
                .setDescription(oldEmbed.description)
                .addFields({
                    name: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                    value: `${priorityEmojis[newPriority]} **${newPriority.toUpperCase()}**`,
                    inline: false
                })
                .setColor(priorityColors[newPriority])
                .setTimestamp();

            const closeButton = new ButtonBuilder()
                .setCustomId('close_ticket')
                .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                .setStyle(ButtonStyle.Danger);

            const row1 = new ActionRowBuilder().addComponents(closeButton);
            const row2 = createPriorityButtons(newPriority);

            await firstMessage.edit({
                embeds: [newEmbed],
                components: [row1, row2]
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        const notificationEmbed = new EmbedBuilder()
            .setTitle('üîÑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–º–µ–Ω–µ–Ω')
            .setDescription(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω —Å ${priorityEmojis[oldPriority]} **${oldPriority.toUpperCase()}** –Ω–∞ ${priorityEmojis[newPriority]} **${newPriority.toUpperCase()}**\n–ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${interaction.user}`)
            .setColor(priorityColors[newPriority])
            .setTimestamp();

        await interaction.channel.send({ embeds: [notificationEmbed] });

        // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—Å–æ–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        if (newPriority === 'high') {
            const alertEmbed = new EmbedBuilder()
                .setTitle('‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
                .setDescription(`–¢–∏–∫–µ—Ç ${interaction.channel} –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.`)
                .setColor('#ff0000')
                .setTimestamp();

            await interaction.channel.send({
                content: `<@&${process.env.SUPPORT_ROLE_ID}>`,
                embeds: [alertEmbed]
            });
        }

        await interaction.reply({
            content: `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${priorityEmojis[newPriority]} **${newPriority.toUpperCase()}**!`,
            ephemeral: true
        });

        logInfo('Priority', `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–∫–µ—Ç–∞ ${ticket.ticketId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newPriority} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}`);
    } catch (error) {
        logError('PriorityChange', error);
        await interaction.reply({
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–∏–∫–µ—Ç–∞.',
            ephemeral: true
        });
    }
}

function createPriorityButtons(currentPriority) {
    const buttons = [];
    const priorities = ['low', 'medium', 'high'];

    for (const priority of priorities) {
        const button = new ButtonBuilder()
            .setCustomId(`priority_${priority}`)
            .setLabel(priority.toUpperCase())
            .setEmoji(priorityEmojis[priority])
            .setStyle(priority === currentPriority ? ButtonStyle.Secondary : ButtonStyle.Primary);

        buttons.push(button);
    }

    return new ActionRowBuilder().addComponents(buttons);
}

module.exports = {
    handlePriorityChange,
    createPriorityButtons,
    priorityColors,
    priorityEmojis
}; 